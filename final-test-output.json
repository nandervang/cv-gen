{"success":true,"data":{"fileUrl":"data:text/html;base64,","format":"html","generatedAt":"2025-10-17T07:07:45.694Z","template":"andervang-consulting","filename":"CV_Niklas_Andervang.html","note":"Generated with ConsultantCVPayload format"}}